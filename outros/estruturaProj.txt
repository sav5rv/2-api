Aqui estÃ¡ a estrutura completa e detalhada do projeto atÃ© o momento. IncluÃ­ todos os diretÃ³rios, arquivos, e uma breve descriÃ§Ã£o do conteÃºdo de cada um.

---

### **Estrutura do Projeto**
```plaintext
meu-projeto/
â”œâ”€â”€ config/
â”‚   â”œâ”€â”€ database.js            # ConfiguraÃ§Ã£o do MongoDB
â”‚   â”œâ”€â”€ emailConfig.js         # ConfiguraÃ§Ã£o do Nodemailer
â”‚   â””â”€â”€ timezone.js            # ConfiguraÃ§Ã£o para ajustar o fuso horÃ¡rio do MongoDB
â”œâ”€â”€ controllers/
â”‚   â”œâ”€â”€ usuarioController.js   # LÃ³gica dos endpoints relacionados aos usuÃ¡rios
â”‚   â””â”€â”€ acessoController.js    # LÃ³gica dos endpoints relacionados aos acessos
â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ Usuario.js             # Modelo Mongoose para usuÃ¡rios
â”‚   â””â”€â”€ Acesso.js              # Modelo Mongoose para acessos
â”œâ”€â”€ routes/
â”‚   â”œâ”€â”€ usuarioRoutes.js       # Rotas relacionadas aos usuÃ¡rios
â”‚   â””â”€â”€ acessoRoutes.js        # Rotas relacionadas aos acessos
â”œâ”€â”€ middlewares/
â”‚   â”œâ”€â”€ autenticar.js          # Middleware para verificar tokens JWT
â”‚   â””â”€â”€ logger.js              # Middleware para registrar logs de requisiÃ§Ã£o
â”œâ”€â”€ utils/
â”‚   â””â”€â”€ emailService.js        # ServiÃ§o utilitÃ¡rio para envio de e-mails
â”œâ”€â”€ .env                       # VariÃ¡veis de ambiente
â”œâ”€â”€ .gitignore                 # Arquivos/diretÃ³rios a serem ignorados pelo Git
â”œâ”€â”€ package.json               # DependÃªncias e scripts do projeto
â”œâ”€â”€ package-lock.json          # VersÃµes exatas das dependÃªncias instaladas
â”œâ”€â”€ server.js                  # InicializaÃ§Ã£o do servidor Express
â””â”€â”€ README.md                  # DocumentaÃ§Ã£o bÃ¡sica do projeto
```

---

### **DescriÃ§Ã£o Detalhada dos Arquivos**

#### **1. ConfiguraÃ§Ãµes**
- **`config/database.js`**  
  Configura a conexÃ£o com o MongoDB usando o `mongoose`.

- **`config/emailConfig.js`**  
  Configura o transporte do Nodemailer para envio de e-mails (atualmente usando Hotmail).

- **`config/timezone.js`**  
  Configura o MongoDB para usar o fuso horÃ¡rio correto (BrasÃ­lia, UTC-3).

#### **2. Controladores**
- **`controllers/usuarioController.js`**  
  ContÃ©m a lÃ³gica para:
  - Criar usuÃ¡rios.
  - Atualizar senha.
  - Recuperar senha (com envio de link por e-mail).
  - Redefinir senha com token.

- **`controllers/acessoController.js`**  
  ContÃ©m a lÃ³gica para:
  - Registrar acessos (com sucesso ou falha).
  - Listar todos os acessos.
  - Listar acessos de um usuÃ¡rio especÃ­fico.

#### **3. Modelos**
- **`models/Usuario.js`**  
  Define o esquema do usuÃ¡rio:
  - Campos: `nome`, `email`, `senha`, `createdAt`, etc.
  - MÃ©todos: hash de senha e comparaÃ§Ã£o de senha.

- **`models/Acesso.js`**  
  Define o esquema do acesso:
  - Campos: `usuarioId`, `status`, `ip`, `nomeMaquina`, `dataHora`, etc.

#### **4. Rotas**
- **`routes/usuarioRoutes.js`**  
  Define endpoints relacionados aos usuÃ¡rios:
  - `POST /usuarios` - Criar usuÃ¡rio.
  - `POST /usuarios/trocar-senha` - Trocar senha.
  - `POST /usuarios/recuperar-senha` - Enviar link de recuperaÃ§Ã£o.
  - `POST /usuarios/redefinir-senha/:token` - Redefinir senha.

- **`routes/acessoRoutes.js`**  
  Define endpoints relacionados aos acessos:
  - `POST /acessos` - Registrar acesso.
  - `GET /acessos` - Listar todos os acessos.
  - `GET /acessos/:usuarioId` - Listar acessos de um usuÃ¡rio especÃ­fico.

#### **5. Middlewares**
- **`middlewares/autenticar.js`**  
  Middleware para verificar o token JWT em rotas protegidas.

- **`middlewares/logger.js`**  
  Middleware para registrar logs das requisiÃ§Ãµes no console (Ãºtil para debugging).

#### **6. UtilitÃ¡rios**
- **`utils/emailService.js`**  
  ServiÃ§o para envio de e-mails usando o Nodemailer.

#### **7. Outros Arquivos**
- **`.env`**  
  ContÃ©m variÃ¡veis de ambiente, como:
  - `DATABASE_URL`, `HOTMAIL_USER`, `HOTMAIL_PASS`, `SECRET_KEY`.

- **`server.js`**  
  Configura o servidor Express:
  - Carrega middlewares globais, conecta ao MongoDB e configura as rotas.

- **`README.md`**  
  DocumentaÃ§Ã£o bÃ¡sica do projeto, incluindo como configurar e executar.

---

### **DependÃªncias no `package.json`**
```json
{
  "dependencies": {
    "bcrypt": "^5.0.1",
    "dotenv": "^16.0.0",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.0.0",
    "nodemailer": "^6.9.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.0"
  }
}
```

---

### **PrÃ³ximos Passos**
- Testar endpoints individualmente usando uma ferramenta como **Postman** ou **Insomnia**.
- Criar uma interface front-end para interagir com os endpoints.
- Adicionar testes automatizados para validar a API.

Se precisar de ajuda com algo especÃ­fico, como testes ou novos recursos, Ã© sÃ³ avisar! ðŸ˜Š